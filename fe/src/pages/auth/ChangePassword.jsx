import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { changePassword } from '../../services/authService';
import '../../assets/auth/css/AuthStyles.css'; // ƒë·∫£m b·∫£o c√≥ style

export default function ChangePassword() {
  const [form, setForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const [passwordValidations, setPasswordValidations] = useState({
    length: false,
    uppercase: false,
    lowercase: false,
    number: false,
    specialChar: false
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });

    if (name === 'newPassword') {
      setPasswordValidations({
        length: value.length >= 8,
        uppercase: /[A-Z]/.test(value),
        lowercase: /[a-z]/.test(value),
        number: /[0-9]/.test(value),
        specialChar: /[\W_]/.test(value)
      });
    }
  };

  const isPasswordStrong = () => {
    return Object.values(passwordValidations).every(Boolean);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (form.newPassword !== form.confirmPassword) {
      toast.error("‚ùå M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp");
      return;
    }

    if (!isPasswordStrong()) {
      toast.error("‚ùå M·∫≠t kh·∫©u ch∆∞a ƒë·ªß m·∫°nh");
      return;
    }

    try {
      await changePassword({
        currentPassword: form.currentPassword,
        newPassword: form.newPassword
      });

      toast.success("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng");
      setForm({ currentPassword: '', newPassword: '', confirmPassword: '' });
      setPasswordValidations({});
    } catch (err) {
      toast.error(err.response?.data?.message || "‚ùå ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
    }
  };

  return (
    <div className="auth-section">
      <div className="auth-card">
        <h2 className="auth-title">ƒê·ªïi m·∫≠t kh·∫©u</h2>
        <form onSubmit={handleSubmit}>
          <input
            type="password"
            name="currentPassword"
            value={form.currentPassword}
            onChange={handleChange}
            placeholder="M·∫≠t kh·∫©u hi·ªán t·∫°i"
            required
            className="auth-input"
          />
          <input
            type="password"
            name="newPassword"
            value={form.newPassword}
            onChange={handleChange}
            placeholder="M·∫≠t kh·∫©u m·ªõi"
            required
            className="auth-input"
          />

          {/* üí° G·ª£i √Ω tr·ª±c ti·∫øp */}
          <ul className="password-rules">
            <li className={passwordValidations.length ? 'valid' : ''}>
              ‚úî √çt nh·∫•t 8 k√Ω t·ª±
            </li>
            <li className={passwordValidations.uppercase ? 'valid' : ''}>
              ‚úî C√≥ ch·ªØ in hoa (A-Z)
            </li>
            <li className={passwordValidations.lowercase ? 'valid' : ''}>
              ‚úî C√≥ ch·ªØ th∆∞·ªùng (a-z)
            </li>
            <li className={passwordValidations.number ? 'valid' : ''}>
              ‚úî C√≥ s·ªë (0-9)
            </li>
            <li className={passwordValidations.specialChar ? 'valid' : ''}>
              ‚úî C√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#...)
            </li>
          </ul>

          <input
            type="password"
            name="confirmPassword"
            value={form.confirmPassword}
            onChange={handleChange}
            placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi"
            required
            className="auth-input"
          />
          <button type="submit" className="auth-button">C·∫≠p nh·∫≠t</button>
        </form>
      </div>
    </div>
  );
}
